{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","placeholder","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAgB5C,OACI,sBAAMC,SAbW,SAAAC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAQ,OAAKP,GAAL,mBAAmBO,OACzCN,EAAc,MASlB,SACI,uBACIO,YAAY,YACZC,KAAK,OACLC,MAAOV,EACPW,SAVc,SAAAR,GACtBF,EAAcE,EAAES,OAAOF,a,+BCjBlBG,EAAO,uCAAG,WAAON,GAAP,uBAAAO,EAAA,6DACbC,EADa,0FAC4EC,UAAUT,GADtF,sBAGIU,MAAMF,GAHV,cAGbG,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXF,IAAKA,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOF,EAAS,EAATA,IAEhC,OACI,sBAAKM,UAAU,gDAAf,UACI,qBAAKC,IAAOP,EAAKQ,IAAKN,IACtB,4BAAIA,QCFHO,EAAU,SAAC,GAAgB,IAAfzB,EAAc,EAAdA,SAAc,ECFX,SAAAA,GAAa,IAAD,EACVR,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHuB,mBAC7BC,EAD6B,KACtBC,EADsB,KAkBpC,OAZAC,qBAAW,WACPvB,EAAQN,GAAU8B,MAAK,SAAAC,GACnBC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,WAET,CAAC1B,IAGI2B,EDdiBM,CAAajC,GAA9Ba,EAF4B,EAE5BA,KAAMa,EAFsB,EAEtBA,QAEb,OACI,qCACA,6BAAK1B,IACJ0B,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SAEQT,EAAKE,KAAI,SAAAC,GAAG,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEbpBiB,EAAe,WAAO,IAAD,EAEM1C,mBAAS,IAFf,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAI9B,OACI,qCACE,0DACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ4C,EAAWpB,KAAI,SAAAf,GACX,OAAO,cAAC,EAAD,CACPA,SAAUA,GACLA,Y,MCd3BoC,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,W","file":"static/js/main.5ff03507.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(category => [inputValue,...category])\r\n            setInputValue(\"\")\r\n        }\r\n    }\r\n\r\n    const handleInputchange = e => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                placeholder=\"sharingan\"\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputchange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=76c24rwUDNfAINsJpFQo8zB7KVKTo6hO&q=${encodeURI(category)}&limit=11`;\r\n\r\n    const response = await fetch(url);\r\n    const {data} = await response.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            img: img.images.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs\r\n\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, img}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInLeftBig\">\r\n            <img src = {img} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from '../components/GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    const {data, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n        {loading && <p>Loading</p>}\r\n        <div className=\"card-grid\">\r\n            {\r\n                data.map(img =>(\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState,useEffect } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = category => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n        getGifs(category).then(imgs =>{\r\n            setTimeout(() => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            }, 1500);\r\n        })\r\n    },[category])\r\n    \r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <>\r\n          <h1>Generador de aminaciones</h1>\r\n          <AddCategory setCategories={setCategories}/>\r\n          <hr/>\r\n          {/* <button onClick={handleAdd}>Agregar</button> */}\r\n          <ol>\r\n              {\r\n                  categories.map(category =>{\r\n                      return <GifGrid \r\n                      category={category}\r\n                      key={category}\r\n                      />\r\n                  })\r\n              }\r\n          </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}